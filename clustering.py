import matplotlib.pyplot as plot
from matplotlib import style
import numpy as np
from sklearn.cluster import KMeans
from sklearn import preprocessing
import pandas as pd
from matplotlib import style


def handle_non_numerical_data(df):
    columns=df.columns.values
    for column in columns:
        text_digit_vals={}
        def convert_to_int(val):
            return text_digit_vals[val]
        if df[column].dtype != np.int64 and df[column].dtype !=np.float64 :
            column_contents=df[column].values.tolist()
            unique_elements=set(column_contents)
            x=0
            for unique in unique_elements:
                if unique not in text_digit_vals:
                    text_digit_vals[unique]=x
                    x+=1
            df[column]=list(map(convert_to_int,df[column]))
    return df


def main():
    
    #call your csv-format dataset ; 
    #here I used mydataset.csv which was generated by generate-data.py
    df=pd.read_csv('mydataset.csv',sep=",",encoding = "ISO-8859-1")
    df.convert_objects(convert_numeric=True)
    #convert your categorical data into numerical data so you can apply Kmeans
    handle_non_numerical_data(df) 

    #In my case , I want to extract the fourth and seventh columns in order to calculate correlation between them
    X=df.iloc[:,[3,6]].values
    
    
    #looking for the optimal number of clusters
    wcss=[]
    for i in range(1,16):
        kmeans=KMeans(n_clusters=i,init='k-means++',random_state=0)
        kmeans.fit(X)
        wcss.append(kmeans.inertia_)
    plot.plot(range(1,16),wcss)
    plot.xlabel('optimal number of clusters')
    plot.show()
    
    #As shown in OptimalNumberOfClusters the optimal number we get in this case is 4
    #I have to mention that the optimal number changesby changing your variables
            
    #KMEANS clustering
    kmeans=KMeans(n_clusters=4,init='k-means++',random_state=0)
    y=kmeans.fit_predict(X)
    
    #if we want some colors 
    plot.scatter(X[y==0,0],X[y==0,1],s=25,c='red',label='cluster1')
    plot.scatter(X[y==1,0],X[y==1,1],s=25,c='blue',label='cluster2')
    plot.scatter(X[y==2,0],X[y==2,1],s=25,c='magenta',label='cluster3')
    plot.scatter(X[y==3,0],X[y==3,1],s=25,c='black',label='cluster4')


    plot.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1],s=25,c='yellow',label='centroid')
    plot.title('kmeans clustering')
    plot.xlabel('Consumption')
    plot.ylabel('Areas of interest')
    plot.legend()
    plot.show()  
    
    
if __name__ == '__main__':
    main()                 
